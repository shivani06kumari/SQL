use mavenmovies;
-- 1. **Rank the customers based on the total amount they've spent on rentals.** 
    SELECT
    c.first_name,
    c.last_name,
    SUM(p.amount) as total_amount,
    RANK() OVER (ORDER BY SUM(p.amount) DESC) as ranking
FROM
    customer c
JOIN
    payment p ON p.customer_id = c.customer_id
JOIN
    rental r ON p.rental_id = r.rental_id
GROUP BY
    c.customer_id, c.first_name, c.last_name
ORDER BY
    ranking;
----------------------------------------------------------------------------
-- 2. **Calculate the cumulative revenue generated by each film over time.** 
select f.title, sum(p.amount) over (partition  by  title order by payment_date) as revenue ,date(payment_date) as date
 from 
 film f join inventory i on f.film_id=i.film_id join rental r on r.inventory_id=i.inventory_id join payment p on p.rental_id=r.rental_id ORDER BY f.film_id, p.payment_date;
--------------------------------------------------------------------------
-- 3. **Determine the average rental duration for each film, considering films with similar lengths.**
SELECT film_id, title, rental_duration, AVG(rental_duration) OVER (PARTITION BY length) 
AS avg_rental_duration
FROM film
WHERE length IS NOT NULL;
 ---------------------------------------------------------------------
-- 4. **Identify the top 3 films in each category based on their rental counts.** 
with rankedfilm as(
SELECT 
     title,category_id,row_number() over(partition by category_id order by count(rental_id) desc ) as rankings
FROM
    film f
        JOIN
    film_category fc ON f.film_id = fc.film_id
        JOIN
    inventory i ON f.film_id = i.film_id
        JOIN
    rental r ON r.inventory_id = i.inventory_id  group by title,category_id  )
select title,rankings , category_id from rankedfilm where rankings <=3;
----------------------------------------------------------------------

-- 5. **Calculate the difference in rental counts between each customer's total rentals and the average rentals  across all customers.** 
SELECT
        customer_id,
        COUNT(rental_id) AS total_rentals,
        AVG(COUNT(rental_id)) over() AS avg_rentals_across_customers,
        COUNT(rental_id) - AVG(COUNT(rental_id)) over() AS rental_difference
    FROM
        rental
    GROUP BY
        customer_id;
       
------------------------------------------------------------------
-- 6. **Find the monthly revenue trend for the entire rental store over time.**
WITH month_revenue AS (
    SELECT
        DATE_FORMAT(payment_date, '%Y-%m') AS month,
        SUM(amount) AS total_revenue
    FROM
        payment
    GROUP BY
        DATE_FORMAT(payment_date, '%Y-%m')
)
select month,total_revenue,sum(total_revenue) over (order by month)  as cumulative_revenue from month_revenue order by month;
---------------------------------------------------------------------
-- 7. **Identify the customers whose total spending on rentals falls within the top 20% of all customers.** 
with tsr as(SELECT customer_id,SUM(amount) AS total_spending,RANK() OVER (ORDER BY SUM(amount) DESC) AS customer_rank
    FROM payment GROUP BY customer_id)
SELECT customer_id, total_spending
FROM tsr WHERE customer_rank <= (SELECT 0.2 * COUNT(DISTINCT customer_id) FROM tsr );
---------------------------------------------------------------------
-- 8. **Calculate the running total of rentals per category, ordered by rental count.**
 WITH crc AS (
    SELECT fc.category_id, COUNT(r.rental_id) AS rental_count,
        RANK() OVER (PARTITION BY fc.category_id ORDER BY COUNT(r.rental_id) DESC) AS rental_rank
    FROM film_category fc JOIN rental r ON fc.film_id = r.inventory_id
    GROUP BY fc.category_id)
SELECT crc.category_id, crc.rental_count,SUM(crc.rental_count) OVER (ORDER BY crc.rental_rank) AS running_total
FROM crc
ORDER BY crc.rental_rank; 
------------------------------------------------------------
-- 9. **Find the films that have been rented less than the average rental count for their respective categories.** 
with avg_rental as( 
select film_id,category_id,count(rental_id) as rental_count,avg(count(rental_id))over (partition by fc.category_id) as avg_rental_count FROM
        film_category fc
    JOIN
        rental r ON fc.film_id = r.inventory_id
    GROUP BY
        fc.film_id, fc.category_id)
 select film_id,category_id,rental_count,avg_rental_count from avg_rental where rental_count < avg_rental_count;
-------------------------------------------------------------
-- 10. **Identify the top 5 months with the highest revenue and display the revenue generated in each month.**
with month_revenue as (
select date_format(payment_date,'%m-%Y') as month,sum(amount) as total_month_revenue from payment group by date_format(payment_date,'%m-%Y'))
 select month, total_month_revenue from month_revenue order by total_month_revenue desc limit 5;