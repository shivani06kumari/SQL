-- Fist Nomal Form (1NF): 
-- 1 Identify a table in the Sakila database that violates 1NF. Explail how you would normalize it to achieve 1NF 

---------------------------------------------------------------------------------------
--  Second Nomal Form (2N):
-- 2 Choose a table in Sakila and describe how you would determine whether it is in 2NF . If it violates 2NF,  explain the steps to normalize it 

---------------------------------------------------------------------------------------
 -- Third Nomal Form (3NF) :
 -- 3 Identify a table in Sakila that violates 3NF . Describe the trasitive dependecies present and outline the  steps to normalize the table to 3NF 
 ---------------------------------------------------------------------------------------------
 ---------------------------------------------------------------------------------------
 -- Nomalization Pocess :
 -- 4 Take a specific table in Sakila and guide through the process of normalizig it from the initial  unormalized form up to at least 2NF
 ----------------------------------------------------------------------------------------
 ---------------------------------------------------------------------------------------
-- CTE Basics  :
-- 5 Write a query using a CTE to retrieve the distinct list of actor names and the number of films they have acted in from the actor and film_actor  tables 
with actor_film as(
select concat(a.first_name  , ' ' , a.last_name) as actor_name , count(fa.actor_id) as total_film  from actor a join film_actor fa on a.actor_id=fa.actor_id group by concat(a.first_name  , ' ' , a.last_name) )
select  distinct actor_name , total_film from actor_film ;
---------------------------------------------------------------------------------------
--  Recusive CTE :
-- 6 Use a recursive CTE to generate a hierarchical list of categories and their subcategories from the category table in Sakila 
--------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------
-- CTE with Joins 
-- film language category  
-- 7 Create a CTE that combines information from the  film and language tables to display the film title, language name, and rental rate 
with film_d as(select title as film_name , name as language_name ,rental_rate from film f join language l on f.language_id=l.language_id )
select film_name,language_name , rental_rate from film_d;
---------------------------------------------------------------------------------------
-- CTE fo Aggegation 
-- 8 Write a query usig a CTE to find the total revenue generated by each customer (sum of paymets) from the customer and payment tables 
with customer_revenue as(
select concat(first_name,' ',last_name) as customer_name,sum(amount) as total_revenue from customer c join payment p on p.customer_id=c.customer_id group by concat(first_name,' ',last_name) )
select customer_name , total_revenue from customer_revenue;
---------------------------------------------------------------------------------------
 -- CTE with Window Functions 
-- film 
-- 9 Utilize a CTE with a window function to rank films based on their rental duration from the film table 
with film_info as(
select title,rental_duration  from film)
select  title,rank() over(partition by rental_duration order by title) as film_rank from film_info;
---------------------------------------------------------------------------------------
-- CTE and Filtering 
-- 10 Create a CTE to list customers who have made more than two rentals, and then join this CTE with the  customer table to retrieve additional customer details 
with total_rentals as (
select  c.customer_id, count(rental_id) as rentals from customer c  join rental r on r.customer_id = c.customer_id group by c.customer_id having rentals > 2 )
select *from total_rentals tr join customer ct on ct.customer_id = tr.customer_id;
---------------------------------------------------------------------------------------
-- CTE fo Date Calculations 
-- 11 Write a query usig a CTE to find the total number of rentals made each month, considering the rental_date from the  rental  table 
with total_rental as (
select count(rental_id) as rentalss, monthname(rental_date) as Monthss from rental group by monthss)
select rentalss, Monthss from total_rental;
---------------------------------------------------------------------------------------
 -- CTE fo Pivot Opeations 
-- payment rental_date 
-- 12 Use a CTE to pivot the data from the payment table to display the total paymets made by each customer in  separate colums for differet payment methods 
with customer_payment as (
select c.customer_id, count(payment_id) total_payment from payment p join customer c on p.customer_id = c.customer_id group by c.customer_id)
select customer_id, total_payment from customer_payment;
-------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------
 -- CTE and Self-Join 
-- 13 Create a CTE to generate a report showing pairs of actors who have appeared in the same film together, using the film_actor table 
with actor_report as (
select fa.actor_id as actor_a, fb.actor_id as actor_b,title from film_actor fa join  film_actor fb on fa.film_id = fb.film_id and fa.actor_id < fb.actor_id
join film f on fa.film_id = f.film_id)
select actor_a, actor_b,title from actor_report;


---------------------------------------------------------------------------------------
-- CTE fo Recusive Seach 
 -- 14 Implemet a recursive CTE to find all employees in the staff table who report to a specific manager,    considering the reports_to  column. 
 ------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------- 
